{"version":3,"sources":["components/Navbar.js","App.js","index.js"],"names":["Header","header","Search","div","CityInput","input","SearchBtn","Navbar","fetchWeather","useState","city","setCity","placeholder","value","onChange","e","target","onClick","viewBox","fill","class","fill-rule","d","clip-rule","App","iconLink","setIconLink","forecast","setForecast","temperature","setTemperature","a","fetch","mode","response","json","updateWeather","data","console","log","condition","weather","tempK","main","temp","name","humidity","icon","Math","floor","useEffect","Forecast","p","Card","Icon","img","Temperature","Container","className","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAOMA,EAAS,IAAGC,OAAN,uLAENC,EAAS,IAAGC,IAAN,yLAENC,EAAY,IAAGC,MAAN,6GAETC,EAAY,IAAGH,IAAN,sLAGA,SAASI,EAAT,GAAiC,IAAhBC,EAAe,EAAfA,aAAe,EAEpBC,mBAAS,UAFW,mBAEtCC,EAFsC,KAEhCC,EAFgC,KAG7C,OACE,6BACC,kBAACX,EAAD,KACE,kBAACE,EAAD,KACC,kBAACE,EAAD,CAAWQ,YAAY,oBAAoBC,MAAOH,EAAMI,SAAU,SAAAC,GAAC,OAAIJ,EAAQI,EAAEC,OAAOH,UACxF,kBAACP,EAAD,CAAWW,QAAS,kBAAIT,EAAaE,KACrC,yBAAKQ,QAAQ,YAAYC,KAAK,QAAQC,MAAM,kBAAiB,0BAAMC,YAAU,UAAUC,EAAE,mHAAmHC,YAAU,iBCrB/M,SAASC,IAAO,IAAD,EAEIf,mBAAS,IAFb,gCAGIA,mBAAS,gDAHb,mBAGrBgB,EAHqB,KAGXC,EAHW,OAIIjB,mBAAS,IAJb,mBAIrBkB,EAJqB,KAIXC,EAJW,OAKUnB,mBAAS,IALnB,mBAKrBoB,EALqB,KAKRC,EALQ,iDAO5B,WAA4BpB,GAA5B,eAAAqB,EAAA,+EAE2BC,MAAM,qDAAD,OAC2BtB,EAD3B,2CAE1B,CAAEuB,KAAM,SAJd,cAEUC,EAFV,gBAMuBA,EAASC,OANhC,OAQIC,EARJ,oFAS0B,GAT1B,2DAP4B,sBAwB5B,SAASA,EAAcC,GAErB,GAAKA,EAAL,CAGAC,QAAQC,IAAIF,GALe,IAQhBG,EARgB,YAavBH,EALFI,QARyB,MAUZC,EAGXL,EAHFM,KAAOC,KAGLP,EAFFQ,KAEER,EADFM,KAAOG,SAGTR,QAAQC,IAAIG,GACZ,IAAMK,EAAOP,EAAS,KAChBb,EAAWa,EAAS,KAC1BZ,EAAYD,GACZD,EAAY,oCAAD,OAAqCqB,EAArC,YACXjB,EAAekB,KAAKC,MAAMP,EAAM,OAxBlCQ,qBAAU,cAEP,IAyBJ,IAAMC,EAAW,IAAGC,EAAN,6GACPC,EAAO,IAAGlD,IAAN,2QACJmD,EAAM,IAAGC,IAAL,mDACJC,EAAc,IAAGJ,EAAN,6FACjB,OACE,6BACE,kBAAC7C,EAAD,CAAQC,aArDgB,8CAsDxB,kBAACiD,EAAA,EAAD,CAAWC,UAAU,QACnB,yBAAKA,UAAU,gCACf,kBAACL,EAAD,KACI,kBAACF,EAAD,KAAWxB,GACX,kBAAC2B,EAAD,CAAMK,IAAKlC,EAAUmC,IAAI,gBACzB,kBAACJ,EAAD,KAAc3B,EAAd,aC1DZgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACvC,EAAD,OAEFwC,SAASC,eAAe,W","file":"static/js/main.daaa5d14.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport tw, {styled} from \"twin.macro\"\n\nimport {AppBar} from '@material-ui/core'\n\n\n\nconst Header = tw.header`bg-gray-700 w-full h-16 flex flex-row justify-center items-center`\n\nconst Search = tw.div`flex flex-row rounded w-56 h-10 overflow-hidden shadow`\n\nconst CityInput = tw.input`appearance-none py-2 px-3`\n\nconst SearchBtn = tw.div`bg-gray-800 w-full h-full flex flex-row justify-center items-center`\n\n\nexport default function Navbar({fetchWeather}) {\n  \n  const [city, setCity]  = useState('London')\n  return (\n    <div>\n     <Header>\n       <Search>\n        <CityInput placeholder=\"Enter a city here\" value={city} onChange={e => setCity(e.target.value)}/>\n        <SearchBtn onClick={()=>fetchWeather(city)}>\n        <svg viewBox=\"0 0 20 20\" fill=\"white\" class=\"search w-6 h-6\"><path fill-rule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clip-rule=\"evenodd\"></path></svg>\n        </SearchBtn >\n        </Search>\n    </Header>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport tw from 'twin.macro'\nimport Navbar from \"./components/Navbar\";\nexport default function App() {\n  \n  const [cityData, setcityData] = useState(\"\");\n  const [iconLink, setIconLink] = useState(\"http://openweathermap.org/img/wn/02d@2x.png\")\n  const [forecast, setForecast] = useState(\"\")\n  const [temperature, setTemperature] = useState(\"\")\n  \n  async function fetchWeather(city) {\n    try {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=607e75a15955b047dee2aa02c66f43a6`,\n        { mode: \"cors\" }\n      );\n      const json = await response.json()\n      \n      updateWeather(json)\n    } catch (error) {return false}\n  }\n\n\n  useEffect(() => {\n  //  fetchWeather(\"Toronto\")\n  }, []);\n\n  function updateWeather(data) {\n    \n    if (!data) {\n      return\n    }\n    console.log(data)\n    // console.log(data['weather'][0]['icon'])\n    const {\n      weather:[condition] ,\n      \n      main: {temp: tempK},\n      name,\n      main: {humidity},\n    } = data;\n\n    console.log(tempK)\n    const icon = condition['icon']\n    const forecast = condition['main']\n    setForecast(forecast)\n    setIconLink(`http://openweathermap.org/img/wn/${icon}@2x.png`)\n    setTemperature(Math.floor(tempK-273))\n\n  }\n const Forecast = tw.p`text-xl text-gray-600 font-bold`\n  const Card = tw.div`rounded shadow max-w-sm py-3 px-3 flex flex-col items-center`\n  const Icon= tw.img`object-contain w-40 h-32`\n  const Temperature = tw.p`text-3xl text-gray-600`\n  return (\n    <div>\n      <Navbar fetchWeather={fetchWeather} />\n      <Container className=\"py-3\">\n        <div className=\"flex flex-row justify-center\">\n        <Card>\n            <Forecast>{forecast}</Forecast>\n            <Icon src={iconLink} alt=\"Weather Pic\"/>\n            <Temperature>{temperature}Â°C</Temperature>\n          \n        </Card>\n        </div>\n      \n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}